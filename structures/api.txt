* Settings:

structures.mapgen_delay = 0.1: Spawning is delayed by this many seconds per structure. Higher values give more time for other mapgen operations to finish and reduce lag, but cause towns to appear more slowly. Example: If the delay is 0.1 and a town has 1000 structures, it will take the entire town 100 seconds to spawn.
structures.mapgen_keep_cubes = true: Whether to persist the mapgen cube list to a text file. Enabling this assures that virtual cubes are persisted between server restarts, allowing towns to resume spawning after the server is back up.
structures.mapgen_keep_structures = false: Whether to keep structures in the table after they have been placed by on_generate. Enabling this uses more resources and may cause overlapping schematics to be spawned multiple times, but reduces the chances of structures failing to spawn.
structures.mapgen_cube_multiply_horizontal = 1: Multiply the horizontal size of the virtual cube by this amount. Larger values decrease town frequency, but give more room for towns to be arranged in.
structures.mapgen_cube_multiply_vertical = 2: Multiply the vertical size of the virtual cube by this amount.

* Main functions and values:

structures:register_group({...}): The function used to define a structure group. Each group is scanned when a virtual cube is activated, and chosen as a potential group if it meets the necessary criteria. Parameters:
	name = "town": The name used to identify this structure group.
	biomes = {1, ...}: The biomes this group may spawn in, represented as a list of biome ID's. Optional, only works if the mapgen can report biomes. Note that biomes are checked in the first chunk that activates the virtual cube, which means success is probabilistic.
	noiseparams = {..}: Parameters for the perlin noise used to determine group and structure height. You almost always want this to match the noise parameters of the biome the group spawns in, so buildings can align with the terrain and not float or get buried. If the seed parameter is nil, the mapgen's seed is used.
	buildings = {{...}, {...}}: The table that contains this group's buildings, each building defined in a sub-table. Parameters:
		name = "path/house.mts": The path to the schematic of this structure.
		name = {"path/house_foo.mts", "path/house_bar.mts"}: When defined like this, a random schematic is chosen from the list. ALL SCHEMATICS MUST HAVE THE SAME SIZE!
		name_start = "path/house_start.mts": Only used if this building has multiple floors. This is the schematic of the bottom most structure. MUST HAVE THE SAME HORIZONTAL SIZE AS name AND name_end!
		name_end = "path/house_start.mts": Only used if this building has multiple floors. This is the schematic of the top most structure. MUST HAVE THE SAME HORIZONTAL SIZE AS name AND name_start!
		count = 10: The number of structures of this type to be spawned. This determines both the probability of the structure, as well as the horizontal scale of the group.
		layer = 0: The collision layer this structure is located on. Structures will only align with each other if part of the same layer, and cut through one another if not. This is typically useful for underground passages or suspended road systems.
		offset = 0: Number of nodes by which to deviate this structure vertically. Use a positive value to lift the structure, negative to bury it. Typically useful if the building has a basement, in which case you'll want the basement's height as a negative value.
		alignment = 0: Amount by which the structure is centered toward the middle of the height map. If 0 height is determined entirely by the perlin noise, if 1 the structure is positioned in the center.
		floors_min = 0: If this building has multiple floors, this represents the minimum amount. When this is greater than zero, name_start and name_end must also be specified!
		floors_max = 0: If this building has multiple floors, this represents the maximum amount. When this is greater than zero, name_start and name_end must also be specified!
	roads = {{...}, {...}}: The table that contains this group's roads, each building defined in a sub-table. Parameters:
		name_I = "path/road_I.mts": The I segment of this road (connects up and down). ALL ROAD SEGMENT TYPES MUST HAVE THE SAME SIZE AND MUST BE SQUARE! (x == z)
		name_L = "path/road_L.mts": The L segment of this road (connects up and right).
		name_P = "path/road_P.mts": The P segment of this road (connects down).
		name_T = "path/road_T.mts": The T segment of this road (connects left, right and up).
		name_X = "path/road_X.mts": The X segment of this road (connects all four directions).
		count = 10: Same as for buildings.
		layer = 0: Same as for buildings.
		offset = 0: Same as for buildings.
		alignment = 0: Same as for buildings.
		branch_min = 1: Minimum number of segments after which an intersection can occur. Higher values result in rarer roads.
	group.spawn_group = function(mins, maxs, perlin) ... end: Executes after the group and its properties have been chosen, and before the structures are planned and spawned. If this function exists and doesn't return true, spawning the group is aborted. Parameters:
		mins = {...}: The start corner of the group.
		maxs = {...}: The end corner of the group.
		perlin: The 2D perlin map used to determine structure height.
	group.spawn_structure_pre = function(name, number, mins, maxs, size, angle) ... end: Executes for each structure before it is spawned. If this function exists and doesn't return true, spawning the structure is aborted.
	group.spawn_structure_post = function(name, number, mins, maxs, size, angle) ... end: Executes for each structure after it is spawned. Parameters:
		name = "foo/bar.mts": The name and path of the schematic file.
		number = 0: The number of this structure inside the structures table, which virtually represents spawn order. Buildings start from 1, roads are numbered from the last building.
		mins = {...}: The start corner of the structure.
		maxs = {...}: The end corner of the structure.
		size = {...}: Structure size (the size of its schematic).
		angle = 0: The angle this structure is rotated to. Can be 0, 90, 180, 270.

* Scripting functions and values:

	structures.mapgen_groups = {...}: The table containing all structure groups (defined by structures:register_group). Additional parameters:
		size_horizontal: The horizontal size of the group, determined by the size and count of all structures.
		size_vertical: The vertical size of the group, determined by the tallest structure and the perlin height map.
	structures.mapgen_cubes = {...}: The table containing all virtual cubes that a town may spawn in. Parameters:
		mins = {...}: The start corner of the cube.
		maxs = {...}: The end corner of the cube.
		group = 0: The ID of the group chosen for this virtual cube if any.
		structures = {...}: The list of structures inside this group which haven't spawned yet. Created when the cube is activated and the group is chosen.
	structures.mapgen_cube_horizontal = 0: The horizontal scale of virtual cubes, determined by the largest group.
	structures.mapgen_cube_vertical = 0: The vertical scale of virtual cubes, determined by the largest group.
