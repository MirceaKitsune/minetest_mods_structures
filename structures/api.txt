* Settings:

structures.mapgen_delay = 1: Spawning is delayed by this many seconds for structures, starting the moment the area around structure was generated. Higher values give more time for other mapgen operations to finish and reduce lag, but cause buildings to appear later.
structures.mapgen_area_multiply = 1: Multiply the size of the virtual area by this amount. Larger values decrease town frequency, but give more room for towns to be arranged in.
structures.mapgen_structure_clear = 10: Clear this many nodes above terrain for spawned structures. Used to reduce the risk of tree parts being left in the air as structures cut through them. Only used if the structure's "force" flag is true.

* Main functions and values:

structures:register_group({...}): The function used to define a structure group. Each group is scanned when a virtual area is activated, and chosen as a potential group if it meets the necessary criteria. Parameters:
	name = "town": The name used to identify this structure group.
	biomes = {1, ...}: The biomes this group may spawn in, represented as a list of biome ID's. Optional, only works if the mapgen can report biomes. Note that biomes are checked in the first chunk that activates the virtual area, which means success is probabilistic.
	height_min = 2: Minimum height at which this group and its structures are allowed to spawn.
	height_max = 2: Maximum height at which this group and its structures are allowed to spawn.
	buildings = {{...}, {...}}: The table that contains this group's buildings, each building defined in a sub-table. Parameters:
		name = "path/house.mts": The path to the schematic of this structure.
		name = {"path/house_foo.mts", "path/house_bar.mts"}: When defined like this, a random schematic is chosen from the list. ALL SCHEMATICS MUST HAVE THE SAME SIZE!
		name_start = "path/house_start.mts": Only used if this building has multiple floors. This is the schematic of the bottom most structure. MUST HAVE THE SAME HORIZONTAL SIZE AS name AND name_end!
		name_end = "path/house_start.mts": Only used if this building has multiple floors. This is the schematic of the top most structure. MUST HAVE THE SAME HORIZONTAL SIZE AS name AND name_start!
		replacements = {...}: A list of nodes to be replaced with other nodes before the structure is spawned. See the documentation for minetest.place_schematic on how to use this.
		force = true: If false, "air" and "ignore" nodes aren't placed from the schematic. Disable this if you want the structure to merge with other nodes it intersects, rather than the perimeter around it being cleared first.
		count = 10: The number of structures of this type to be spawned. This determines both the probability of the structure, as well as the horizontal scale of the group.
		layers = {1, ...}: Structures will only align with each other if part of the same layer, and cut through one another if not. This is typically useful for underground passages or suspended roads systems. Every structure must be on at least one layer, while layers start from 1 and must always be in numerical order!
		offset = 0: Number of nodes by which to deviate this structure vertically. Use a positive value to lift the structure, negative to bury it. Typically useful if the building has a basement, in which case you'll want the basement's height as a negative value.
		floors_min = 0: If this building has multiple floors, this represents the minimum amount. When this is greater than zero, name_start and name_end must also be specified!
		floors_max = 0: If this building has multiple floors, this represents the maximum amount. When this is greater than zero, name_start and name_end must also be specified!
	roads = {{...}, {...}}: The table that contains this group's roads, each building defined in a sub-table. Parameters:
		name_I = "path/road_I.mts": The I segment of this road (connects up and down). ALL ROAD SEGMENT TYPES MUST HAVE THE SAME SIZE AND MUST BE SQUARE! (x == z)
		name_L = "path/road_L.mts": The L segment of this road (connects up and right).
		name_P = "path/road_P.mts": The P segment of this road (connects down).
		name_T = "path/road_T.mts": The T segment of this road (connects left, right and up).
		name_X = "path/road_X.mts": The X segment of this road (connects all four directions).
		replacements = {...}: Same as for buildings.
		force = true: Same as for buildings.
		count = 10: Same as for buildings. In the case of roads, this represents the total number of intersections that will exist in the town.
		layer = 0: Same as for buildings.
		offset = 0: Same as for buildings.
		flatness = 1: Amount by which road segments will center to the height of the starting point they branched from. A high value is generally recommended, to avoid excessive height differences between road parts.
		branch_count = 5: How many times each starting point will branch into new intersections. The number of starting points is (count / branches).
		branch_min = 1: Minimum number of segments over which an intersection can occur. Higher values result in rarer roads.
		branch_max = 10: Maximum number of segments under which an intersection can occur. Higher values result in rarer roads.
	group.spawn_group = function(mins, maxs, perlin) ... end: Executes after the group and its properties have been chosen, and before the structures are planned and spawned. If this function exists and doesn't return true, spawning the group is aborted. Parameters:
		mins = {...}: The start corner of the group.
		maxs = {...}: The end corner of the group.
		perlin: The 2D perlin map used to determine structure height.
	group.spawn_structure_pre = function(name, number, mins, maxs, size, angle) ... end: Executes for each structure before it is spawned. If this function exists and doesn't return true, spawning the structure is aborted.
	group.spawn_structure_post = function(name, number, mins, maxs, size, angle) ... end: Executes for each structure after it is spawned. Parameters:
		name = "foo/bar.mts": The name and path of the schematic file.
		number = 0: The number of this structure inside the structures table, which virtually represents spawn order. Buildings start from 1, roads are numbered from the last building.
		mins = {...}: The start corner of the structure.
		maxs = {...}: The end corner of the structure.
		size = {...}: Structure size (the size of its schematic).
		angle = 0: The angle this structure is rotated to. Can be 0, 90, 180, 270.

* Scripting functions and values:

	structures.mapgen_groups = {...}: The table containing all structure groups (defined by structures:register_group). Additional parameters:
		size_horizontal: The horizontal size of the group, determined by the size and count of all structures.
		size_vertical: The vertical size of the group, determined by the tallest structure and the perlin height map.
	structures.mapgen_areas = {...}: The table containing all virtual areas that a town may spawn in. Parameters:
		mins = {...}: The start corner of the area.
		maxs = {...}: The end corner of the area.
		group = 0: The ID of the group chosen for this virtual area if any.
		structures = {...}: The list of structures inside this group which haven't spawned yet. Created when the area is activated and the group is chosen.
	structures.mapgen_area_area = 0: The scale of virtual area, determined by the largest group.
